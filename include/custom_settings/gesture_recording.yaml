
configGestures:
  MIN_CONFIDENCE: 0.3
  SINCE_FRAME_TIME: 0.5
  TCH_TURN_ON_DIST: [0.9, 0.9, 0.9, 0.9,  0.9, 0.9, 0.9]
  TCH_TURN_OFF_DIST: [0.5, 0.5, 0.5, 0.5,  0.5, 0.5, 0.5]
  OC_TURN_ON_THRE: [0.94, 0.8, 0.8, 0.8, 0.8]
  OC_TURN_OFF_THRE: [0.85, 0.6, 0.6, 0.6, 0.6]
# Keyboard (use lowercase) key for recording
staticGestures:
  - name: grab
    key: 1
    filename: gesture56.png
    turn_on_off: [0.3, 0.9]
  - name: pinch
    key: 2
    filename: gesture33.png
    turn_on_off: [0.3, 0.9]
  - name: point
    key: 3
    filename: gesture0.png
    turn_on_off: [0.3, 0.9]
  - name: respectful
    key: 4
    filename: gesture100.png
    turn_on_off: [0.3, 0.9]
  - name: spock
    key: 5
    filename: gesture101.png
    turn_on_off: [0.3, 0.9]
  - name: rock
    key: 6
    filename: gesture102.png
    turn_on_off: [0.3, 0.9]
  - name: victory
    key: 7
    filename: gesture103.png
    turn_on_off: [0.3, 0.9]
  - name: italian
    key: 8
    filename: gesture104.png
    turn_on_off: [0.3, 0.9]
dynamicGestures:
  - name: circ #rotate
    key: q
    filename: gesture34.png
  - name: swipe #swipe_Up
    key: w
    filename: gesture64.png
  - name: pin
    key: e
    filename: gesture3.png
  - name: touch
    key: r
    filename: gesture1.png
  - name: swipe_Left
    key: a
  - name: swipe_Down
    key: s
  - name: swipe_Right
    key: d

#self.gests.append(GestureData(NAME="move_in_axis", var_len=3, minthre=0.4, maxthre=0.1))
#self.gests.append(GestureData(NAME="rotation_in_axis", var_len=3, minthre=[-0.9,-0.6,0.8], maxthre=[0.5,0.5,0.4]))


Recording:
  BufferLen: 300
  Length: 1 # max. BufferLen/100, [sec]
  # Record 'after' pressing button or record (given time) 'before' pressing button
  RecordingStart: after # TODO:
#
#param:
#    :observation_type == 'user_defined' -> includes finger on/off normalized, fingers distance normalized
#                       == 'all_defined' -> includes all differences between fingers and distances
#    :time_series_operation == 'average' -> value of observation is averaged of all time
#                           == 'middle' -> take middle time sample
#                           == 'as_dimesion' -> three dimensional X as output
#                           == 'take_every_10' -> every tenth time sample is new recorded sample
#                           == 'take_every' -> every time sample is new recorded sample
#
#    :position == '' -> no position
#              == 'absolute' -> position of palm is intercorporated
#              == 'absolute+finger' -> position of palm and pointing finger is intercorporated
#
Recognition:
  observation_type: user_defined
  time_series_operation: take_every_10
  position: ""
